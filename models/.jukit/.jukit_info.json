{"cmd": "import pandas as pd\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.stattools import adfuller\n#|%%--%%| <j1lXqUZbfh|L0TKw1XlHe>\n\n#Load data\ndata = pd.read_csv(\"DATA_BIRDS.csv\")\ndata\n\n#|%%--%%| <L0TKw1XlHe|m8SHN5MIkf>\n\ndata.describe()\n\n#|%%--%%| <m8SHN5MIkf|fAcn66mJHW>\n\n# Drop Unnecessary Columns\n# Season is not necessary because we have the Time data columns, from this we can get the season\n\ndata = data.drop(['Season'], axis=1)\n#|%%--%%| <fAcn66mJHW|oIo2ApcgbM>\n\n#Check for missing values\ndata.isnull().sum()\n\n#|%%--%%| <oIo2ApcgbM|8I8oSrb1Hi>\n\ndata = data.dropna()\ndata.shape\n\n\n#|%%--%%| <8I8oSrb1Hi|dRnvjTylou>\n\ndata['Time'] = pd.to_datetime(data['Time'])\ndata.dtypes\n#|%%--%%| <dRnvjTylou|zVRm31alVN>\n\n# Convert 'Time' column to datetime\ndata.set_index('Time', inplace = True)\n\n#|%%--%%| <zVRm31alVN|nopO0UUNGE>\n\ndata.isnull().sum()\n#|%%--%%| <nopO0UUNGE|tEpIMsfopS>\n#Train size\ntrain_size = int(len(data) * 0.8)\ntrain, test = data[0:train_size], data[train_size:len(data)]\ntrain.shape, test.shape\n\n#|%%--%%| <tEpIMsfopS|Kaejdbu6TT>\n\n#Check for stationarity\n#In this section we will check if the data is stationary or not by using the ADF(Augmented Dickey-Fuller)\n#test. The null hypothesis of the ADF test is that the time series is non-stationary. So, if the p-value\n#is less than the significance level (0.05), we reject the null hypothesis and infer that the time series\n#is indeed stationary.\n\nadf_test = adfuller(train['Population'].dropna())\nprint('ADF Statistic: %f' % adf_test[0])\nprint('p-value: %f' % adf_test[1])\n\n#|%%--%%| <Kaejdbu6TT|NVlFGypm8R>\nr\"\"\"°°°\n# We can see that the p-value is smaller than 0.05, the p_value here indicates that the time series is non-stationary. If the p-value of the test is geater than 0.05, then the null hypothesis is not rejected and the time series is stationary.\n°°°\"\"\"\n#|%%--%%| <NVlFGypm8R|nNhZwEYJIc>\n\n#Differencing\n#In this section we will difference the data to make it stationary. We will difference the data by one time period.\n#|%%--%%| <nNhZwEYJIc|4U9avZfanE>\n\n# Group by bird\ngrouped = data.groupby('Species Name')\n\nfor bird, group in grouped:\n    print(f\"Processing bird: {bird}\")\n    # Train size\n    train_size = int(len(group) * 0.8)\n    train, test = group[0:train_size], group[train_size:len(group)]\n    print(train.shape, test.shape)\n    # Check for stationarity\n    adf_test = adfuller(train['Population'].dropna())\n    print('ADF Statistic: %f' % adf_test[0])\n    print('p-value: %f' % adf_test[1])\n    # Differencing\n    train['Population'] = train['Population'].diff().dropna()\n    # Check for stationarity again after differencing\n    adf_test_diff = adfuller(train['Population'].dropna())\n    print('ADF Statistic after differencing: %f' % adf_test_diff[0])\n    print('p-value after differencing: %f' % adf_test_diff[1])\n\n#|%%--%%| <4U9avZfanE|MRV0dgxUZK>\n\n# Train model for each bird\n# In this section we will train an ARIMA model for each bird. We will use the ARIMA model to forecast the population of each bird\n\n# Group by bird\ngrouped = data.groupby('Species Name')\n\nfor bird, gruop in grouped:\n    print(f\"Processing bird: {bird}\")\n    #Train size\n    train_size = int(len(gruop) * 0.8)\n    train, test = gruop[0:train_size], gruop[train_size:len(gruop)]\n    print(train.shape, test.shape)\n    #Call ARIMA model for each bird\n    model = ARIMA(train['Population'], order=(5,1,0))\n    model_fit = model.fit()\n    #Predict\n    forecast = model_fit.forecast(steps=len(test))\n    #Calculate error\n    MSE = mean_squared_error(test['Population'], forecast)\n    print(f\"Mean Squared Error: {MSE}\")\n    MAE = mean_absolute_error(test['Population'], forecast)\n    print(f\"Mean Absolute Error: {MAE}\")\n    #Plot\n    plt.figure(figsize=(10,6))\n    plt.plot(train['Population'], label='Training Data')\n    plt.plot(test['Population'], label='Actual Data', color='green')\n    plt.title(f\"Actual for {bird}\")\n    plt.legend()\n    plt.show()\n    plt.figure(figsize=(10,6))\n    plt.plot(train['Population'], label='Training Data')\n    plt.plot(test.index, forecast, label='Forecasted Data', color='red')\n    plt.title(f\"Forecast for {bird}\")\n    plt.legend()\n    plt.show()\n", "import_complete": 1, "terminal": "kitty", "output_complete": 1, "cmd_opts": " -s --md_cell_start=r\\\"\\\"\\\"°°°", "outhist_title": "Z21xyiHJrR", "outhist_cell": "GGn4m5obH3", "is_md": 0}